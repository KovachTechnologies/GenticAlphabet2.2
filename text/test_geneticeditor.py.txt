#!/usr/bin/env python3

"""Unit tests for geneticeditor module."""

import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import unittest
from unittest.mock import patch, MagicMock
from PyQt5.QtWidgets import QApplication, QTextBrowser, QTableWidgetItem
from geneticeditor import Ui_MainWindow
import parameters

class TestGeneticEditor(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        """Initialize QApplication for all tests."""
        cls.app = QApplication(sys.argv)

    @classmethod
    def tearDownClass(cls):
        """Clean up QApplication."""
        del cls.app

    def setUp(self):
        """Set up test environment."""
        self.ui = Ui_MainWindow()
        # Mock GUI elements
        self.ui.compiledWindow = MagicMock(spec=QTextBrowser)
        self.ui.codeWindow = MagicMock(spec=QTextBrowser)
        self.ui.tableData = MagicMock()
        self.ui.statusbar = MagicMock()
        self.ui.a = MagicMock()  # Mock agent

    def test_compile_code_valid(self):
        """Test compileCode with valid high-level code."""
        self.ui.codeWindow.toPlainText.return_value = "START STOP"
        self.ui.compileCode()
        self.ui.compiledWindow.setText.assert_called_with(
            parameters.OPERATIONS["START"][0] + parameters.OPERATIONS["STOP"][0])

    def test_compile_code_empty(self):
        """Test compileCode with empty input."""
        self.ui.codeWindow.toPlainText.return_value = ""
        result = self.ui.compileCode()
        self.assertEqual(result, 1)
        self.ui.compiledWindow.setText.assert_not_called()

    def test_decompile_code_valid(self):
        """Test decompileCode with valid codon sequence."""
        self.ui.compiledWindow.toPlainText.return_value = (
            parameters.OPERATIONS["START"][0] + parameters.OPERATIONS["STOP"][0])
        self.ui.decompileCode()
        self.ui.codeWindow.setText.assert_called_with("START STOP")

    def test_decompile_code_empty(self):
        """Test decompileCode with empty input."""
        self.ui.compiledWindow.toPlainText.return_value = ""
        result = self.ui.decompileCode()
        self.assertEqual(result, 1)
        self.ui.codeWindow.setText.assert_not_called()

    def test_load_data_valid(self):
        """Test loadData with valid code."""
        self.ui.compiledWindow.toPlainText.return_value = "AAAAAA"
        self.ui.a.init.return_value = True
        with patch("interpreter.tokenize_code", return_value=["AAA", "AAA"]):
            self.ui.loadData()
            self.ui.tableData.setColumnCount.assert_called_with(2)
            self.ui.tableData.insertRow.assert_called()
            self.ui.statusbar.showMessage.assert_called_with("Data Loaded!")

    def test_load_data_invalid(self):
        """Test loadData with invalid code."""
        self.ui.compiledWindow.toPlainText.return_value = "INVALID"
        self.ui.a.init.return_value = False
        self.ui.loadData()
        self.ui.statusbar.showMessage.assert_called_with("Code not executable!")
        self.ui.tableData.setRowCount.assert_called_with(0)

    def test_load_progeny_code_valid(self):
        """Test loadProgenyCode with valid progeny code."""
        self.ui.progeny = "AAAAAA"
        self.ui.a.init.return_value = True
        with patch("interpreter.tokenize_code", return_value=["AAA", "AAA"]):
            self.ui.loadProgenyCode()
            self.ui.tableData.setColumnCount.assert_called_with(2)
            self.ui.tableData.insertRow.assert_called()
            self.ui.statusbar.showMessage.assert_called_with("Data Loaded!")

    def test_load_progeny_code_invalid(self):
        """Test loadProgenyCode with invalid progeny code."""
        self.ui.progeny = "INVALID"
        self.ui.a.init.return_value = False
        self.ui.loadProgenyCode()
        self.ui.statusbar.showMessage.assert_called_with("Code not executable!")
        self.ui.tableData.setRowCount.assert_called_with(0)

if __name__ == '__main__':
    unittest.main()
