#!/usr/bin/env python3

"""Interpreter for executing genetic code interactively."""

import logging
import os
import parameters
from agent import Agent
from typing import Optional

def compile_code(lines: list) -> str:
    """
    Compile high-level genetic code into executable code.

    Args:
        lines: List of high-level operation names or codons.

    Returns:
        Compiled genetic code as a string.
    """
    compiled = ""
    for line in lines:
        line = line.strip().upper()
        if not line or line.startswith('#'):
            continue
        # Split space-separated operations
        operations = line.split()
        for op in operations:
            if op in parameters.OPERATIONS:
                compiled += parameters.OPERATIONS[op][0]
            elif len(op) >= parameters.CODON_SIZE and all(c in 'ATGCU' for c in op):
                # Handle codon sequences
                codons = [op[i:i + parameters.CODON_SIZE] 
                          for i in range(0, len(op), parameters.CODON_SIZE)]
                compiled += ''.join(codons)
            else:
                logging.warning("Skipping invalid instruction: %s", op)
    return compiled

def decompile_code(code: str) -> str:
    """
    Decompile genetic code into high-level operations.

    Args:
        code: Genetic code string.

    Returns:
        Decompiled code as a string.
    """
    tape = [code[i:i + parameters.CODON_SIZE] for i in range(0, len(code), parameters.CODON_SIZE)]
    decompiled = []
    for codon in tape:
        for op, codons in parameters.OPERATIONS.items():
            if codon in codons:
                decompiled.append(op)
                break
        else:
            decompiled.append(codon)
    return " ".join(decompiled)

def tokenize_code(execution_string: str) -> list:
    """
    Tokenize genetic code into codons.

    Args:
        execution_string: Genetic code string.

    Returns:
        List of codons.
    """
    return [execution_string[i:i + parameters.CODON_SIZE] 
            for i in range(0, len(execution_string), parameters.CODON_SIZE)]

def compress_code(execution_string: str) -> str:
    """
    Compress genetic code by keeping only operational codons.

    Args:
        execution_string: Genetic code string.

    Returns:
        Compressed genetic code string.
    """
    tape = [execution_string[i:i + parameters.CODON_SIZE] 
            for i in range(0, len(execution_string), parameters.CODON_SIZE)]
    compressed = [codon for codon in tape if any(codon in codons for op, codons in parameters.OPERATIONS.items())]
    return "".join(compressed)

def run_interpreter(input_file: Optional[str] = None, verbose: bool = False) -> None:
    """
    Run an interactive interpreter for genetic code execution.

    Args:
        input_file: Optional file with commands to execute.
        verbose: If True, enable DYNAMIC_MODE for detailed logging.
    """
    parameters.DYNAMIC_MODE = verbose
    agent = Agent(family_id=0)
    logging.info("Starting genetic code interpreter. Type 'quit' to exit.")

    if input_file:
        if not os.path.exists(input_file):
            logging.error("Input file does not exist: %s", input_file)
            return
        with open(input_file, 'r') as f:
            commands = f.readlines()
    else:
        commands = []

    command_buffer = []
    while True:
        if commands:
            command = commands.pop(0).strip()
            print(f"> {command}")
        else:
            command = input("> ").strip()

        if command.lower() == "quit":
            logging.info("Exiting interpreter")
            break

        if command.lower() == "compile":
            if command_buffer:
                compiled = compile_code(command_buffer)
                logging.debug("Compiled code: %s", compiled)
                print(compiled)
                command_buffer = []
            else:
                logging.warning("No code to compile")
            continue

        if command.lower() == "decompile":
            if command_buffer and len(command_buffer) == 1:
                decompiled = decompile_code(command_buffer[0])
                logging.debug("Decompiled code: %s", decompiled)
                print(decompiled)
                command_buffer = []
            else:
                logging.warning("Provide one compiled code line to decompile")
            continue

        if command.lower() == "run":
            if command_buffer and len(command_buffer) == 1:
                code = command_buffer[0]
                logging.debug("Running code: %s", code)
                if agent.init(code):
                    try:
                        while not agent.iteration():
                            if parameters.DYNAMIC_MODE:
                                logging.debug("Progeny code: %s, PC: %d", 
                                             agent.progeny_code, agent.program_counter)
                        logging.info("Execution complete. Progeny code: %s", agent.progeny_code)
                        print(f"Progeny code: {agent.progeny_code}")
                    except Exception as e:
                        logging.error("Execution failed: %s", str(e))
                        print(f"Execution failed: {str(e)}")
                else:
                    logging.error("Invalid code: %s", code)
                    print(f"Invalid code: {code}")
                command_buffer = []
            else:
                logging.warning("Provide one compiled code line to run")
            continue

        command_buffer.append(command)

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="Genetic Code Interpreter")
    parser.add_argument("--input-file", type=str, help="Input file with commands")
    parser.add_argument("--verbose", action="store_true", help="Enable verbose logging")
    args = parser.parse_args()

    logging.basicConfig(level=logging.DEBUG if args.verbose else logging.INFO,
                        format="%(asctime)s %(levelname)s %(message)s")
    run_interpreter(args.input_file, args.verbose)
